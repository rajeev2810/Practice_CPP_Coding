template <typename T>
class shared_ptr{
private:
T * t = new T;
int size;
int ref_count {};

shared_ptr(const shared_ptr& sh)
{
	if (sh != null)
	{
		t = new<T>();
		t = sh.t;
		size = sh.size;
}
ref_count++;
}

shared_ptr& operator= (shared_ptr& sh)
{
if (sh != null)
	{
		t = sh.t;
		size = sh.size;
		}
		return *this;
		
		ref_count++;

}

shared_ptr& operator->(share_ptr &sh)
{
return *this;
}

virtual ~shared_ptr()
{
ref_count--;
delete t;
}





}